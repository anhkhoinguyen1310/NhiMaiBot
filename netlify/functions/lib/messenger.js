const PAGE_ACCESS_TOKEN = process.env.PAGE_ACCESS_TOKEN;
const GRAPH_BASE = "https://graph.facebook.com/v18.0";
const PAGE_ID = process.env.PAGE_ID;
// Disabled mode shared message
const BOT_DISABLED_MESSAGE = "üôè Ti·ªám hi·ªán t·∫°m ng∆∞ng c·∫≠p nh·∫≠t t·ª± ƒë·ªông online. ƒê·ªÉ bi·∫øt ƒë∆∞·ª£c gi√° vui l√≤ng g·ªçi 0932 113 113. N·∫øu qu√Ω kh√°ch c·∫ßn t∆∞ v·∫•n n·ªØ trang xin b·∫•m v√†o 'V·∫•n ƒê·ªÅ Kh√°c'. Xin c·∫£m ∆°n ·∫°.";
// --- Early close configuration (optional) ---
// Set EARLY_CLOSE_DATE (YYYY-MM-DD, Asia/Ho_Chi_Minh) and EARLY_CLOSE_HOUR (24h) in env to activate.
// Example (for a one-off early close at 17:00 on 2025-10-08):
// EARLY_CLOSE_DATE=2025-10-08
// EARLY_CLOSE_HOUR=17
const EARLY_CLOSE_DATE = process.env.EARLY_CLOSE_DATE; // format: YYYY-MM-DD
const EARLY_CLOSE_HOUR = parseInt(process.env.EARLY_CLOSE_HOUR, 10); // default 17 if provided
const { apologyText, formatPrice, apologyUpdateText } = require("./format");
const { fetchPrice } = require("./price");
const { DateTime } = require("luxon");

// Helper to get the current DateTime in Asia/Ho_Chi_Minh
function getHoChiMinhNow() {
    return DateTime.now().setZone("Asia/Ho_Chi_Minh");
}

function isBusinessHour(dt = getHoChiMinhNow()) {
    const hour = dt.hour;
    return hour >= 7 && hour < 21;
}

function isEarlyCloseActive(dt = getHoChiMinhNow()) {
    if (!EARLY_CLOSE_DATE) return false;
    const dayStr = dt.toFormat("yyyy-LL-dd");
    return dayStr === EARLY_CLOSE_DATE;
}

function getEarlyCloseStatus() {
    const now = getHoChiMinhNow();
    const activeToday = isEarlyCloseActive(now);
    return {
        EARLY_CLOSE_DATE,
        EARLY_CLOSE_HOUR,
        EARLY_CLOSE_TEST_NOW: process.env.EARLY_CLOSE_TEST_NOW || null,
        now: now.toISO(),
        hour: now.hour,
        activeToday,
        afterCut: activeToday ? now.hour >= EARLY_CLOSE_HOUR : false
    };
}

async function callGraph(body) {
    const r = await fetch(`${GRAPH_BASE}/me/messages?access_token=${PAGE_ACCESS_TOKEN}`, {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify(body),
    });
    try { console.log("Graph API response:", await r.json()); } catch { }
}

// generic caller for handover paths
async function callGraphPath(path, body) {
    const r = await fetch(`https://graph.facebook.com/v18.0/me/${path}?access_token=${PAGE_ACCESS_TOKEN}`, {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify(body),
    });
    const data = await r.json().catch(() => ({}));
    console.log(`Graph ${path} status=`, r.status, "body=", data);
    return { ok: r.ok, data };
}


async function sendText(psid, text) {
    return callGraph({
        recipient: { id: psid },
        messaging_type: "RESPONSE",
        message: { text },
    });
}

async function sendTyping(psid, on = true) {
    const started = Date.now();
    const action = on ? "typing_on" : "typing_off";
    const res = await callGraph({
        recipient: { id: psid },
        sender_action: action,
    });
    console.log("sendTyping", { psid, action, latencyMs: Date.now() - started });
    return res;
}

async function sendQuickPriceOptions(psid) {
    return callGraph({
        recipient: { id: psid },
        messaging_type: "RESPONSE",
        message: {
            text: "B·∫°n c·∫ßn ti·ªám h·ªó tr·ª£ g√¨ ·∫°? Xin nh·∫•n v√†o m·ªôt trong c√°c l·ª±a ch·ªçn b√™n d∆∞·ªõi",

            quick_replies: [
                { content_type: "text", title: "V·∫•n ƒê·ªÅ Kh√°c", payload: "TALK_TO_AGENT" },
                { content_type: "text", title: "Gi√° Nh·∫´n 9999", payload: "PRICE_NHAN_9999" },
                { content_type: "text", title: "Gi√° N·ªØ Trang 610", payload: "PRICE_VANG_18K" },
                { content_type: "text", title: "Gi√° N·ªØ Trang 980", payload: "PRICE_VANG_24K" },

            ],
        },
    });
}
async function sendDisabledNotice(psid, { addCallButton = true } = {}) {
    // Quick replies support only: text | location | user_phone_number | user_email
    // We just keep the TALK_TO_AGENT quick reply (text). Phone quick reply type would be 'user_phone_number' (returns user's number),
    // but we want a direct call button, so we send a second button template when requested.
    await callGraph({
        recipient: { id: psid },
        messaging_type: "RESPONSE",
        message: {
            text: BOT_DISABLED_MESSAGE,
            quick_replies: [
                { content_type: "text", title: "V·∫•n ƒê·ªÅ Kh√°c", payload: "TALK_TO_AGENT" }
            ]
        }
    });
    if (addCallButton) {
        await callGraph({
            recipient: { id: psid },
            messaging_type: "RESPONSE",
            message: {
                attachment: {
                    type: "template",
                    payload: {
                        template_type: "button",
                        text: "üìû C·∫ßn g·∫•p? G·ªçi nhanh ti·ªám:",
                        buttons: [
                            { type: "phone_number", title: "G·ªçi Ti·ªám", payload: "+84932113113" }
                        ]
                    }
                }
            }
        });
    }
}
async function sendHandoverCard(psid) {
    return callGraph({
        recipient: { id: psid },
        messaging_type: "RESPONSE",
        message: {
            attachment: {
                type: "template",
                payload: {
                    template_type: "button",
                    text:
                        "‚ú≥Ô∏è Qu√Ω kh√°ch vui l√≤ng ch·ªù trong gi√¢y l√°t, nh√¢n vi√™n s·∫Ω h·ªó tr·ª£ ngay ·∫°.\n" +
                        "‚ùó N·∫øu c·∫ßn g·∫•p, xin g·ªçi 0932 113 113.\n",
                    //"üëâ B√°o gi√° t·ª± ƒë·ªông ƒë√£ t·∫Øt. Sau khi tr√≤ chuy·ªán xong v·ªõi nh√¢n vi√™n, h√£y b·∫•m 'K√≠ch Ho·∫°t B√°o Gi√°' t·∫°i tin nh·∫Øn n√†y ƒë·ªÉ k√≠ch ho·∫°t l·∫°i b√°o gi√° t·ª± ƒë·ªông.",
                    buttons: [
                        //{ type: "postback", title: "K√≠ch Ho·∫°t B√°o Gi√°", payload: "RESUME_BOT" },
                        { type: "postback", title: "K·∫øt Th√∫c Chat", payload: "RESUME_BOT" },
                        { type: "phone_number", title: "G·ªçi ti·ªám", payload: "+84932113113" }

                    ]
                }
            }
        }
    });
}

async function sendPriceWithNote(psid, label, { delayBetweenMs = 350 } = {}) {
    const now = getHoChiMinhNow();
    const earlyCloseToday = isEarlyCloseActive(now);
    console.log("early-close-debug", getEarlyCloseStatus());

    // If today is an early close day and we've passed the early close hour, treat as closed.
    if (earlyCloseToday && now.hour >= EARLY_CLOSE_HOUR) {
        await sendText(psid, `üôè Ti·ªám ƒë√£ ƒë√≥ng c·ª≠a s·ªõm l√∫c ${EARLY_CLOSE_HOUR}:00 h√¥m nay. Mai ti·ªám ho·∫°t ƒë·ªông b√¨nh th∆∞·ªùng (7:00 - 21:00). Qu√Ω kh√°ch vui l√≤ng quay l·∫°i sau ·∫° ‚ù§Ô∏è`);
        return false;
    }

    // Outside normal business hours (and not in the special early-close window before the cut). 
    if (!isBusinessHour(now)) {
        await sendText(psid, apologyText());
        return false;
    }

    // We're within business hours. Fetch price.
    const d = await fetchPrice(label);
    if (!d || !d.buyVND || !d.sellVND) {
        await sendText(psid, apologyUpdateText());
        return false;
    }

    // If it's the early close day but still before early close hour, prepend a notice.
    if (earlyCloseToday && now.hour < EARLY_CLOSE_HOUR) {
        await sendText(psid, `üì¢ üì¢ Th√¥ng b√°o : H√¥m nay ti·ªám s·∫Ω ƒë√≥ng c·ª≠a s·ªõm l√∫c ${EARLY_CLOSE_HOUR}:00. Qu√Ω kh√°ch vui l√≤ng gh√© ho·∫∑c giao d·ªãch tr∆∞·ªõc ${EARLY_CLOSE_HOUR}:00 ·∫°.`);
    }

    // Standard overload / rate reminder note.
    await sendText(psid, "Xin ch√†o qu√Ω kh√°ch, t·ª´ ng√†y 15/10 Bot b√°o gi√° t·ª± ƒë·ªông s·∫Ω ng∆∞ng ho·∫°t ƒë·ªông cho ƒë·∫øn khi c√≥ th√¥ng b√°o m·ªõi nh·∫•t t·ª´ ti·ªám. Ti·ªám c·∫£m ∆°n qu√Ω kh√°ch ƒë√£ ·ªßng h·ªô bot trong su·ªët th·ªùi gian qua. N·∫øu qu√Ω kh√°ch mu·ªën c·∫≠p nh·∫≠t gi√°, xin h√£y g·ªçi ƒë·∫øn s·ªë 0932113113 ‚ù§Ô∏è");
    await sendText(psid, "‚ùó‚ùóL∆∞u √Ω: Do l∆∞·ª£ng tin nh·∫Øn ƒëang qu√° t·∫£i, qu√Ω kh√°ch vui l√≤ng ch·ªâ nh·∫Øn h·ªèi gi√° 1Ô∏è‚É£ l·∫ßn 1Ô∏è‚É£ ti·∫øng.\n‚ù§Ô∏è Ti·ªám c·∫£m ∆°n qu√Ω kh√°ch ‚ù§Ô∏è");
    if (delayBetweenMs > 0) await new Promise(r => setTimeout(r, delayBetweenMs));
    await sendText(psid, formatPrice(d));
    return true;
}


async function addLabelToUser(psid, labelId) {
    const url = `https://graph.facebook.com/v23.0/${labelId}/label?access_token=${PAGE_ACCESS_TOKEN}`;
    const r = await fetch(url, {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({ user: psid })
    });
    console.log("labelUser:", await r.json().catch(() => ({})));
}

// üî∏ Handover: chuy·ªÉn quy·ªÅn cho Page Inbox (ng∆∞·ªùi th·∫≠t)
async function passThreadToHuman(psid, metadata = "handover_to_human") {
    // Page Inbox app_id = 263902037430900
    return callGraphPath("pass_thread_control", {
        recipient: { id: psid },
        target_app_id: 263902037430900,
        metadata,
    });
}
// üî∏ Handover: l·∫•y quy·ªÅn h·ªôi tho·∫°i v·ªÅ cho bot
async function takeThreadBack(psid, metadata = "bot_resume") {
    return callGraphPath("take_thread_control", {
        recipient: { id: psid },
        metadata,
    });
}

async function requestThreadBack(psid, metadata = "bot_request") {
    return callGraphPath("request_thread_control", {
        recipient: { id: psid },
        metadata,
    });
}

async function getThreadOwner(psid) {
    const url = `${GRAPH_BASE}/${process.env.PAGE_ID}/thread_owner?recipient=${psid}&access_token=${PAGE_ACCESS_TOKEN}`;
    const r = await fetch(url);
    const data = await r.json().catch(() => ({}));
    console.log("thread_owner:", data);
    return data;
}

// L·∫•y ID c·ªßa label theo t√™n; n·∫øu ch∆∞a c√≥ th√¨ t·∫°o m·ªõi
async function getOrCreateLabelId(labelName) {
    // 1) list labels
    const listUrl = `${GRAPH_BASE}/${PAGE_ID}/custom_labels?access_token=${PAGE_ACCESS_TOKEN}`;
    const r1 = await fetch(listUrl);
    const j1 = await r1.json().catch(() => ({}));
    const found = j1?.data?.find(
        (x) => (x.page_label_name || x.name) === labelName
    );
    if (found?.id) return found.id;

    // 2) create label (tham s·ªë m·ªõi: page_label_name)
    const createUrl = `${GRAPH_BASE}/${PAGE_ID}/custom_labels?access_token=${PAGE_ACCESS_TOKEN}`;
    const r2 = await fetch(createUrl, {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({ page_label_name: labelName }),
    });
    const j2 = await r2.json().catch(() => ({}));
    // Meta th∆∞·ªùng tr·∫£ { id, page_label_name }
    if (j2?.id) return j2.id;

    console.log("createLabel failed:", j2);
    return null;
}

// G·∫Øn label ƒë√£ c√≥ ID v√†o user
async function addLabelToUser(psid, labelId) {
    const url = `${GRAPH_BASE}/${labelId}/label?access_token=${PAGE_ACCESS_TOKEN}`;
    const r = await fetch(url, {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({ user: psid }),
    });
    console.log("labelUser:", await r.json().catch(() => ({})));
}
// B·ªè label ƒë√£ c√≥ ID kh·ªèi user
async function removeLabelFromUser(psid, labelId) {
    const url = `${GRAPH_BASE}/${labelId}/label?access_token=${PAGE_ACCESS_TOKEN}&user=${psid}`;
    const r = await fetch(url, { method: "DELETE" });
    const data = await r.json().catch(() => ({}));
    console.log("unlabelUser:", data, "status=", r.status);
    return { ok: r.ok, data };
}

async function clearNeedAgentLabel(psid, name = "C·ª©u C·ª©u") { // ‚Üê ƒë·ªïi t√™n theo √Ω b·∫°n
    try {
        // n·∫øu b·∫°n mu·ªën tuy·ªát ƒë·ªëi kh√¥ng t·∫°o label m·ªõi khi ch∆∞a c√≥, c√≥ th·ªÉ t√°ch 1 h√†m getLabelIdOnly()
        const id = await getOrCreateLabelId(name);
        if (id) return removeLabelFromUser(psid, id);
    } catch (e) { console.log("clearNeedAgentLabel error:", e); }
    return null;
}



module.exports = { sendText, sendHandoverCard, sendQuickPriceOptions, sendTyping, passThreadToHuman, sendPriceWithNote, takeThreadBack, addLabelToUser, requestThreadBack, getThreadOwner, getOrCreateLabelId, removeLabelFromUser, clearNeedAgentLabel, sendDisabledNotice, BOT_DISABLED_MESSAGE };
